// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}


model ApiKey {
  pk          Int        @id @default(autoincrement())
  id          String     @unique @default(uuid()) @db.Uuid
  key         String     @unique
  active      Boolean    @default(true)
  staffPk     Int?       @map("staff_pk")
  staffId     String?    @map("staff_id") @db.Uuid
  staff       User?      @relation(fields: [staffPk, staffId], references: [pk, id])
  workspacePk Int?       @map("workspace_pk")
  workspaceId String?    @map("workspace_id") @db.Uuid
  workspace   Workspace? @relation(fields: [workspacePk, workspaceId], references: [pk, id])

  @@unique([workspacePk, workspaceId])
  @@unique([pk, id])
  @@map("api_keys")
}

model User {
  pk            Int            @id @default(autoincrement())
  id             String   @unique @default(uuid()) @db.Uuid
  email          String   @unique
  phone          String?
  password       String
  active         Boolean  @default(true)
  staff          Boolean  @default(false)
  admin          Boolean  @default(false)
  emailVerified  Boolean  @default(false) @map("email_verified")
  phoneVerified  Boolean  @default(false) @map("phone_verified")
  deviceData     Json?
  profile        Profile?
  apiKey         ApiKey[]

  score         Int            @default(0)
  groups        Group[]
  issues        Issue[]
  contributions Contribution[]
  loans         Loan[]
  loanCycle     LoanCycle?
  notification  Notification[]
  
  

  @@unique([pk, id])
  @@map("users")
}

model Group {
  id            Int            @id @default(autoincrement())
  name          String
  size          Int
  leaderId      Int
  // members User[] @relation(fields: [memberId], references: [id]) Sqlite limitation
  members       User           @relation(fields: [memberId], references: [id])
  memberId      Int
  contributions Contribution[]
  loans         Loan[]
  loanCycles    LoanCycle[]
  createdAt     DateTime       @default(now())
  status        GroupStatus    @default(ACTIVE)
}

enum GroupStatus {
  ACTIVE
  DISSOLVED
}

model Contribution {
  id      Int   @id @default(autoincrement())
  amount  Int
  user    User  @relation(fields: [userId], references: [id])
  userId  Int
  group   Group @relation(fields: [groupId], references: [id])
  groupId Int
}

model Loan {
  id           Int         @id @default(autoincrement())
  amount       Float
  group        Group       @relation(fields: [groupId], references: [id])
  groupId      Int
  borrower     User        @relation(fields: [borrowerId], references: [id])
  borrowerId   Int
  repayment    Repayment[]
  repaymentId  Int
  repaidAmount Int         @default(0)
  dueDate      DateTime
  interestRate Float?
  status       LoanStatus  @default(PENDING)
}

model Profile {
  pk                     Int                     @id @default(autoincrement())
  id                     String                  @unique @default(uuid()) @db.Uuid
  photo                  String?
  dob                    DateTime?
  firstName              String?                 @map("first_name")
  lastName               String?                 @map("last_name")
  username               String                  @unique
  referrerCode           String                  @unique @map("affliation_code")
  referralPk             Int?                    @map("referrer_pk")
  referralId             String?                 @map("referrer_id") @db.Uuid
  referrer               Profile?                @relation("referrer", fields: [referralPk, referralId], references: [pk, id])
  refers                 Profile[]               @relation("referrer")
  personalPin            String?                 @map("personal_pin")
  userPk                 Int                     @unique @map("user_pk")
  userId                 String                  @unique @map("user_id") @db.Uuid
  user                   User                    @relation(fields: [userPk, userId], references: [pk, id], onDelete: Cascade, onUpdate: Cascade)
  homeAddress            String?                 @map("home_address")
  comonoRequestId        String?                 @unique @map("comono_request_id")
  lga                    String?
  state                  String?
  city                   String?
  closestLandmark        String?                 @map("closest_landmark")
  bankAccount            BankAccount?
  idFront                String?
  idBack                 String?
  bvn                    String?
  idType                 IdentificationCardType? @map("id_type")
  idNumber               String?                 @map("id_number")
  addressDocument        String?                 @map("address_document")
  bvnVerified            VerificationStatus      @default(NOT_VERIFIED) @map("bvn_verified")
  idVerified             VerificationStatus      @default(NOT_VERIFIED) @map("id_verified")
  addressVerified        VerificationStatus      @default(NOT_VERIFIED) @map("address_verified")
  digitalAddressVerified VerificationStatus      @default(NOT_VERIFIED) @map("digital_address_verified")
  faceVerified           VerificationStatus      @default(NOT_VERIFIED) @map("face_verified")
  nextOfKin              String?                 @map("next_of_kin")
  maritalStatus          String?                 @map("marital_status")
  deviceToken            String?                 @map("device_token")

  // Raw data
  rawBvnData            Json?
  rawIdData             Json?
  rawAddressData        Json?
  rawDigitalAddressData Json?
  rawFaceData           Json?

  @@unique([pk, id])
  @@unique([userPk, userId])
  @@map("profiles")
}

enum LoanStatus {
  PENDING
  APPROVED
  REJECTED
  REPAID
  DEFAULTED
}

enum VerificationStatus {
  NOT_VERIFIED
  PENDING
  APPROVED
  DECLINED
}

enum IdentificationCardType {
  DRIVERS_LICENSE
  INTERNATIONAL_PASSPORT
  NATIONAL_ID
  VOTERS_CARD
}

model LoanCycle {
  id          Int       @id @default(autoincrement())
  group       Group     @relation(fields: [groupId], references: [id])
  groupId     Int
  // currentRecipient User    @relation(fields: [currentRecipientId] references: [id])
  // currentRecipientId Int
  // previousRecipients User[] @relation(fields: [previousRecipientId], references: [id]) @relation("previousRecipient")
  // previousRecipientId Int
  recipient   User      @relation(fields: [recipientId], references: [id])
  recipientId Int       @unique
  isCurrent   Boolean   @default(true)
  startDate   DateTime  @default(now())
  endDate     DateTime?
}

model Repayment {
  id          Int      @id @default(autoincrement())
  amount      Int
  loan        Loan     @relation(fields: [loanId], references: [id])
  loanId      Int
  description String
  date        DateTime @default(now())
}

model Issue {
  id          Int    @id @default(autoincrement())
  description String
  user        User   @relation(fields: [userId], references: [id])
  userId      Int
}

model Notification {
  id      Int              @id @default(autoincrement())
  type    NotificationType
  user    User             @relation(fields: [userId], references: [id])
  userId  Int
  groupId Int?
  sentAt  DateTime         @default(now())
}

enum NotificationType {
  GROUP_INVITE
  LOAN_APPLICATION_UPDATE
  CONTRIBUTION_REMINDER
  LOAN_DUE_REMINDER
  REPAYMENT_RECEIVED
  DEFAULT_NOTICE
}

enum Currency {
  NGN
  USD
  GBP
  EUR
}

enum Gender {
  MALE
  FEMALE
}


// https://mysmeapp.ecobank.com/Verify/Loading